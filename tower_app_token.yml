---
- hosts: all
  gather_facts: no
  vars:
    tower_api_url: https://{{ lookup('env', 'TOWER_HOST') }}/api/v2
    token_description: prograf
    tower_application: prograf
    tower_organization: demo
    tower_project: prometheus-grafana-windows-ansible-example
    tower_template: aa-u7-prometheus-grafana-windows-expand-disk-vmware
  tasks:
    - name: ensure application exists
      awx.awx.tower_application:
        tower_host: "{{ lookup('env', 'TOWER_HOST') | default('localhost') }}"
        tower_username: "{{ lookup('env', 'TOWER_USERNAME') }}"
        tower_password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
        name: "{{ tower_application }}"
        description: "{{ tower_application }} application"
        organization: "{{ tower_organization }}"
        validate_certs: false
        state: present
        authorization_grant_type: password
        client_type: confidential
      delegate_to: localhost

    - name: get tokens
      uri:
        url: "{{ tower_api_url }}/tokens/?description__icontains={{ token_description|urlencode() }}"
        user: "{{ lookup('env', 'TOWER_USERNAME') }}"
        password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
        method: GET
        force_basic_auth: yes
        status_code: [ 200, 202 ]
        return_content: true
        validate_certs: false
      register: tower_get_pat_token
      delegate_to: localhost

    - name: delete a token by its id
      awx.awx.tower_token:
        tower_host: "{{ lookup('env', 'TOWER_HOST') | default('localhost') }}"
        tower_username: "{{ lookup('env', 'TOWER_USERNAME') }}"
        tower_password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
        existing_token_id: "{{ item.id }}"
        validate_certs: false
        state: absent
      loop: "{{ tower_get_pat_token.json.results | default([]) }}"
      delegate_to: localhost

    - name: create a token
      awx.awx.tower_token:
        tower_host: "{{ lookup('env', 'TOWER_HOST') | default('localhost') }}"
        tower_username: "{{ lookup('env', 'TOWER_USERNAME') }}"
        tower_password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
        description: '{{ token_description }}'
        application: '{{ tower_application }}'
        scope: "write"
        state: present
        validate_certs: false
      delegate_to: localhost

    - name: create tower config
      copy:
        dest: /root/.tower.cfg
        content: |
          TOWER_HOST={{ lookup('env', 'TOWER_HOST') | default('localhost') }}
          TOWER_OAUTH_TOKEN={{ tower_token.token }}
          TOWER_PROJECT={{ tower_project }}
          TOWER_TEMPLATE={{ tower_template }}